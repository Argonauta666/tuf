# These pinned requirements are the combined results of `pip-compile` over
# "requirements.in" in each supported Python version.
#
# - Below script may be used (copy-paste to bash removing leading '#') to
#   re-generate this file, e.g. if `requirements.in` is updated.
# - Version updates should be handled by a GitHub-integrated dependency monitor
#   (e.g. Dependabot) that regularly scans PyPI for updates, patches this file,
#   and submits a PR, which triggers CI/CD builds and should catch breaking
#   updates.
#
# # Gather pip-compile results for each supported Python version
# for v in 2.7 3.5 3.6 3.7 3.8; do
#   mkvirtualenv tuf-env-${v} -p python${v};
#   pip install pip-tools;
#   pip-compile requirements.in -n 2>&1 | grep -v "^#"  >> requirements.combined;
#   # Keep one venv as we need it below to add hashes
#   if [ $v != 3.8 ]; then
#     deactivate;
#     rmvirtualenv tuf-env-${v};
#   fi
# done;
# # Create requirements-pinned.txt retaining doc header
# cat requirements-pinned.txt | grep "^#"  > requirements.tmp
# mv requirements.tmp requirements-pinned.txt
# cat requirements.combined | grep -v "^Dry-run," | sort -u >> requirements-pinned.txt
# rm requirements.combined
# # Create requirements.txt with hashes
# pip-compile --generate-hashes -o requirements.txt requirements-pinned.txt
# deactivate
# rmvirtualenv tuf-env-3.8
#
certifi==2019.11.28       # via requests
cffi==1.13.2              # via cryptography, pynacl
chardet==3.0.4            # via requests
colorama==0.4.3
cryptography==2.8
enum34==1.1.6             # via cryptography
idna==2.8                 # via requests
ipaddress==1.0.23         # via cryptography
iso8601==0.1.12
pycparser==2.19           # via cffi
pynacl==1.3.0
python-dateutil==2.8.1    # via securesystemslib
requests==2.22.0
securesystemslib==0.14.0
six==1.14.0
subprocess32==3.5.4       # via securesystemslib
urllib3==1.25.8           # via requests
